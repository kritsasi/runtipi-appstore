{
  "$schema": "../dynamic-compose-schema.json",
  "services": [
    {
      "name": "openflow",
      "image": "openiap/openflow:1.5.12.35",
      "isMain": true,
      "internalPort": 3000,
      "addPorts": [
        { "containerPort": 50051, "hostPort": 50051, "tcp": true },
        { "containerPort": 5858, "hostPort": 5858, "tcp": true }
      ],
      "environment": {
        "protocol": "${APP_PROTOCOL}",
        "domain": "${APP_DOMAIN}",
        "auto_hourly_housekeeping": false,
        "housekeeping_skip_update_user_size": true,
        "housekeeping_skip_calculate_size": true,
        "ensure_indexes": false,
        "agent_oidc_userinfo_endpoint": "http://api:${APP_PORT}/oidc/me",
        "agent_oidc_issuer": "http://${APP_DOMAIN}/oidc",
        "agent_oidc_authorization_endpoint": "http://${APP_DOMAIN}/oidc/auth",
        "agent_oidc_token_endpoint": "http://api:${APP_PORT}/oidc/token",
        "amqp_url": "amqp://guest:guest@rabbitmq?frameMax=0x2000",
        "mongodb_url": "mongodb://mongodb:27017/?replicaSet=rs0",
        "mongodb_db": "openflow",
        "aes_secret": "${OPENFLOW_AES_SECRET}",
        "TZ": "${TZ}"
      },
      "volumes": [
        { 
          "hostPath": "/var/run/docker.sock", 
          "containerPath": "/var/run/docker.sock" 
        }
      ],
      "dependsOn": {
        "rabbitmq": { "condition": "service_healthy" },
        "mongodb": { "condition": "service_healthy" },
        "mongo-init-replica": { "condition": "service_completed_successfully" }
      }
    },
    {
      "name": "mongodb",
      "image": "mongo:4.4",
      "command": "--bind_ip_all --replSet rs0",
      "environment": {
        "MONGO_REPLICA_SET_NAME": "rs0",
        "MONGO_INITDB_DATABASE": "openflow",
        "TZ": "${TZ}"
      },
      "volumes": [
        {
          "hostPath": "${APP_DATA_DIR}/data/mongo",
          "containerPath": "/data/db"
        }
      ],
      "healthCheck": {
        "interval": "10s",
        "timeout": "5s",
        "retries": 10,
        "startPeriod": "40s",
        "test": "sh -c \"echo 'db.adminCommand({ ping: 1 }).ok' | mongo --quiet 127.0.0.1:27017 | grep 1 || exit 1\""
      }
    },
    {
      "name": "mongo-init-replica",
      "image": "mongo:4.4",
      "command": [
        "sh",
        "-c",
        "echo $(date '+%F %T') 'Waiting for MongoDB to respond...'; until mongo --host mongodb:27017 --quiet --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1; do sleep 2; done; echo $(date '+%F %T') 'Initiating replica set (idempotent)...'; mongo --host mongodb:27017 --quiet --eval 'try { rs.initiate({_id:\"rs0\", members:[{_id:0, host:\"mongodb:27017\"}]}) } catch(e) { if (e.code != 23) { throw e } }'; echo $(date '+%F %T') 'Waiting for PRIMARY election...'; until mongo --host mongodb:27017 --quiet --eval 'db.isMaster().ismaster' | grep -q true; do sleep 1; done; echo $(date '+%F %T') 'Replica set ready (PRIMARY).'"
      ],
      "dependsOn": {
        "mongodb": { "condition": "service_healthy" }
      }
    },
    {
      "name": "rabbitmq",
      "image": "rabbitmq:3-management",
      "volumes": [
        {
          "hostPath": "${APP_DATA_DIR}/data/rabbitmq",
          "containerPath": "/var/lib/rabbitmq"
        }
      ],
      "healthCheck": {
        "interval": "10s",
        "timeout": "5s",
        "retries": 12,
        "startPeriod": "20s",
        "test": "rabbitmq-diagnostics ping"
      }
    }
  ]
}
