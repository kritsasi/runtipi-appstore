version: '3.9'

services:
  openflow:
    container_name: openflow
    image: openiap/openflow:1.5.12.29
    restart: unless-stopped
    deploy:
      replicas: 1
    ports:
      - ${APP_PORT}:80
    depends_on:
      openflow-db:
        condition: service_healthy
      openflow-mq:
        condition: service_healthy
    networks:
      - tipi_main_network
    environment:
      - protocol=${APP_PROTOCOL}
      - domain=${APP_DOMAIN}
      - cookie_secret=${OPENFLOW_COOKIE_SECRET}
      - aes_secret=${OPENFLOW_AES_SECRET}
      - amqp_url=amqp://guest:${OPENFLOW_MQ_PASS}@openflow-mq?frameMax=0x2000
      - mongodb_url=mongodb://openflow-db:27017/?replicaSet=rs0
      - mongodb_db=openflow
      - TZ=${TZ}
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.openflow-web-redirect.redirectscheme.scheme: https
      traefik.http.services.openflow.loadbalancer.server.port: 80
      # Web
      traefik.http.routers.openflow-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.openflow-insecure.entrypoints: web
      traefik.http.routers.openflow-insecure.service: openflow
      traefik.http.routers.openflow-insecure.middlewares: openflow-web-redirect
      # Websecure
      traefik.http.routers.openflow.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.openflow.entrypoints: websecure
      traefik.http.routers.openflow.service: openflow
      traefik.http.routers.openflow.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.openflow-local-insecure.rule: Host(`openflow.${LOCAL_DOMAIN}`)
      traefik.http.routers.openflow-local-insecure.entrypoints: web
      traefik.http.routers.openflow-local-insecure.service: openflow
      traefik.http.routers.openflow-local-insecure.middlewares: openflow-web-redirect
      # Local domain secure
      traefik.http.routers.openflow-local.rule: Host(`openflow.${LOCAL_DOMAIN}`)
      traefik.http.routers.openflow-local.entrypoints: websecure
      traefik.http.routers.openflow-local.service: openflow
      traefik.http.routers.openflow-local.tls: true
      runtipi.managed: true

  openflow-db:
    container_name: openflow-db
    image: mongo:8.0.12
    restart: unless-stopped
    networks:
      - tipi_main_network
    volumes:
      - ${APP_DATA_DIR}/data/mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_REPLICA_SET_NAME=rs0
      - TZ=${TZ}
    command: "--bind_ip_all --replSet rs0"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    labels:
      runtipi.managed: true

  openflow-dbsetup:
    container_name: openflow-dbsetup
    image: mongo:8.0.12
    restart: "no"
    depends_on:
      - openflow-db
    networks:
      - tipi_main_network
    command: >
      mongosh --host openflow-db:27017 --eval 
      '
      db = (new Mongo("openflow-db:27017")).getDB("openflow");
      config = {
      "_id" : "rs0",
      "members" : [
        {
          "_id" : 0,
          "host" : "openflow-db:27017"
        }
      ]
      };
      rs.initiate(config);
      '
    labels:
      runtipi.managed: true
      
  openflow-mq:
    container_name: openflow-mq
    image: rabbitmq:3-management
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/data/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=${OPENFLOW_MQ_PASS}
      - TZ=${TZ}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
